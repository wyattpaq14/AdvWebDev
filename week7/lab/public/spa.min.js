class SPA{constructor(route){this.content=document.querySelector("div.spa-content");this.loading=document.querySelector("div.spa-loading").classList;this.Model=new Model;this.View=new View;this.controller=new Controller(this.Model);this.checkedRegex=/(radio|checkbox)/i;window.addEventListener("hashchange",()=>{this.loadingStart();let page=this.Model.page;document.body.id=page;this.controller[page]().then(()=>{return this.renderContent(this.View[page])}).then(()=>{this.bindModelText().parseEvents().twoWayInputBind().parseClassState().cleanNavLinks().loadingEnd()}).catch(err=>{console.error(err);this.renderContent(window.Promise.resolve(this.Model.escapeHTML(err))).then(()=>{this.cleanNavLinks().loadingEnd()})})});if(!window.location.hash&&typeof route==="string"){window.location.hash=route}window.dispatchEvent(new HashChangeEvent("hashchange"))}loadingStart(){this.loading.add("visible");return this}loadingEnd(){this.loading.remove("visible");window.dispatchEvent(new CustomEvent("spaRouteReady"));return this}renderContent(page){return page.then(html=>{this.content.innerHTML=html;return this})}update(evt,funcName){return this.Model[funcName](evt).then(()=>{return this.bindModelText().parseEvents().twoWayInputBind().parseClassState()})}cleanNavLinks(){let links=[].slice.call(document.querySelector("nav").querySelectorAll("a"));links.forEach(link=>{link.setAttribute("href",`${window.location.origin}${link.hash}`)});return this}parseClassState(){let contents=[].slice.call(this.content.querySelectorAll("*[data-bind-class]"));contents.forEach(domElem=>{let css={};const bindClass=domElem.dataset.bindClass.replace(/'/g,'"');try{css=window.JSON.parse(bindClass)}catch(e){console.error(e);css={}}Object.entries(css).forEach(([className,condition])=>{const negation=condition.indexOf("!")>-1;condition=condition.replace(/!|\s/g,"");let add=this.Model[condition];if(negation)add=!add;domElem.classList[add?"add":"remove"](className)})});return this}parseEvents(){let contents=[].slice.call(this.content.querySelectorAll("*[data-bind-event]"));contents.forEach(domElem=>{const[evtName,funcName]=domElem.dataset.bindEvent.split(":");domElem.addEventListener(evtName,evt=>{return this.update(evt,funcName)});delete domElem.dataset.bindEvent});return this}twoWayInputBind(){let inputs=[].slice.call(this.content.querySelectorAll("input, select, textarea"));inputs.filter(field=>field.dataset.bindInput!=="false").filter(field=>field.name||field.dataset.hasOwnProperty("bindModel")).forEach(domElem=>{domElem.dataset.bindInput="false";const evtName=this.checkedRegex.test(domElem.type)?"change":"input";domElem.addEventListener(evtName,evt=>{const target=evt.target;const property=target.name||target.dataset.bindModel;const value=evt.target.type==="checkbox"?target.checked:target.value;this.Model.dataBindModel={[property]:value}})});return this}bindModelText(){let contents=[].slice.call(this.content.querySelectorAll("*[data-bind-model], input, select, textarea"));const obj=this.Model.dataBindModel;contents.filter(domElem=>!domElem.dataset.hasOwnProperty("bindReady")).filter(domElem=>domElem.name||domElem.dataset.hasOwnProperty("bindModel")).forEach(domElem=>{const property=domElem.name||domElem.dataset.bindModel;if(!domElem.dataset.hasOwnProperty("bindModel"))domElem.dataset.bindModel=property;if(!domElem.dataset.hasOwnProperty("bindReady"))domElem.dataset.bindReady="true";const selector=`*[data-bind-model="${property}"]`;let val,safeVal;const useSafeHTML=domElem.dataset.hasOwnProperty("bindSafe");if(obj.hasOwnProperty(property)&&obj[property]!==undefined){val=obj[property];safeVal=this.Model.escapeHTML(val);if(domElem.type==="radio")domElem.checked=domElem.value===val;else if(domElem.type==="checkbox")domElem.checked=val;else if("value"in domElem)domElem.value=useSafeHTML?safeVal:val;else if("innerHTML"in domElem)domElem.innerHTML=useSafeHTML?safeVal:val}if(!domElem.matches("input, select, textarea"))domElem.dataset.bindDisplay=domElem.innerHTML.length?"visible":"hidden";if(domElem.dataset.hasOwnProperty("bindCallback"))this.update(domElem,domElem.dataset.bindCallback);Object.defineProperty(obj,property,{get:()=>{return val},set:newValue=>{let elems=[].slice.call(this.content.querySelectorAll(selector));val=newValue;safeVal=this.Model.escapeHTML(val);elems.forEach(elem=>{const useSafeHTML=elem.dataset.hasOwnProperty("bindSafe");if(elem.type==="radio")elem.checked=elem.value===val;else if(elem.type==="checkbox")elem.checked=val;else if("value"in elem)elem.value=useSafeHTML?safeVal:val;else if("innerHTML"in elem)elem.innerHTML=useSafeHTML?safeVal:val;if(!elem.matches("input, select, textarea"))elem.dataset.bindDisplay=elem.innerHTML.length?"visible":"hidden";if(elem.dataset.hasOwnProperty("bindCallback"))this.update(elem,elem.dataset.bindCallback)});this.parseClassState()},configurable:true})});return this}}class BaseModel{constructor(){this.APIS={};this._Model={};Object.getOwnPropertyNames(Object.getPrototypeOf(new Controller)).filter(page=>page!=="constructor").forEach(page=>{this._Model[page]={}});this.http={get:url=>{return this.httpFetch(url,null,"GET").then(response=>response.json())},post:(url,data)=>{return this.httpFetch(url,data,"POST").then(response=>response.json())},put:(url,data)=>{return this.httpFetch(url,data,"PUT").then(response=>response.json())},delete:url=>{return this.httpFetch(url,null,"DELETE")}}}get dataBindModel(){return this._Model[this.page]}set dataBindModel(model){Object.assign(this._Model[this.page],model);return this}clearDataBindModel(){this._Model[this.page]={};return this}get page(){return window.location.hash.slice(1).split("?")[0]}escapeHTML(html){let div=document.createElement("div");div.appendChild(document.createTextNode(html));return div.innerHTML}httpFetch(url,data,verb){let myHeaders=new Headers;myHeaders.set("Content-Type","application/json");let myInit={method:verb,headers:myHeaders,mode:"cors",cache:"default"};if(data){myInit.body=JSON.stringify(data)}const myRequest=new Request(url,myInit);return fetch(myRequest).then(response=>{if(!response.ok)throw Error(response.statusText);return response})}generateUrlParams(params={}){return`?${Object.keys(params).map(k=>[k,params[k]].map(window.encodeURIComponent).join("=")).join("&")}`}urlParams(){return new URLSearchParams(window.location.search)}}class Components{static resultsData(data){if(!Array.isArray(data))return"";console.log(data);return Promise.resolve(`${data.map(row=>`<tr>\n                        <td>${row._id}</td>\n                        <td>${row.firstName}</td>\n                        <td>${row.lastName}</td>\n                        <td>${row.department}</td>\n                        <td>${row.jobTitle}</td>\n                        <td class="has-text-left">${row.salary}</td>\n                        <td>${new Date(row.startDate).toLocaleDateString("en-US")}</td>\n                        <td class="has-text-centered">\n                          <button class="button is-danger is-outlined" data-id="${row._id}" data-bind-event="click:deleteEmployee">Delete</button>\n                        </td>\n                        <td class="has-text-centered">\n                          <button class="button is-info is-outlined" data-id="${row._id}" data-bind-event="click:updatePage">Update</button>\n                        </td>\n                    </tr>`).join("")}`)}}class Controller{constructor(model){this.Model=model}home(){return this.Model.getHomeMessage()}form(){return Promise.resolve()}test(){return Promise.resolve()}todo(){return this.Model.getTodo()}safe(){return this.Model.setTest()}form2(){this.Model.setReviews();return Promise.resolve()}update(){return this.Model.updatePageLoad();return Promise.resolve()}}class Model extends BaseModel{constructor(){super();this.APIS={Employee:"http://localhost:3001/api/v1/employees/"}}getHomeMessage(){return this.http.get(this.APIS.Employee).then(data=>{return Components.resultsData(data).then(html=>{return this.dataBindModel.employeeTable=html})})}saveEmployee(){const data={firstName:this.dataBindModel.firstName,lastName:this.dataBindModel.lastName,department:this.dataBindModel.department,jobTitle:this.dataBindModel.jobTitle,salary:this.dataBindModel.salary,startDate:this.dataBindModel.startDate};return this.http.post(this.APIS.Employee+"create",data).then(data=>{this.dataBindModel.saveResultMsg="Employee Saved";return data}).catch(err=>{this.dataBindModel.saveResultMsg="Employee NOT Saved";return err})}deleteReview(evt){const url=`${this.APIS.Employee}${evt.target.dataset.id}`;return this.http.delete(url).then(()=>{return this.dataBindModel.deleteResultMsg="Employee Deleted"}).catch(err=>{return this.dataBindModel.deleteResultMsg="Employee NOT Deleted"}).then(()=>{return this.getHomeMessage()})}updatePage(evt){const params=this.generateUrlParams({id:evt.target.dataset.id});window.location.href=`${params}#update`;return Promise.resolve()}updatePageLoad(){const url=`${this.APIS.Reviews}${this.urlParams().get("id")}`;console.log(url);return this.http.get(url).then(data=>{this.dataBind.firstName=data.firstName;this.dataBind.lastName=data.lastName;this.dataBind.department=data.department;this.dataBind.jobTitle=data.jobTitle;this.dataBind.salary=data.salary;this.dataBind.startDate=data.startDate;this.dataBind._id=data._id;return data})}updateEmployee(){const data={firstName:this.dataBindModel.firstName,lastName:this.dataBindModel.lastName,department:this.dataBindModel.department,jobTitle:this.dataBindModel.jobTitle,salary:this.dataBindModel.salary,startDate:this.dataBindModel.startDate};const url=`${this.APIS.Employee}${this.dataBindModel._id}`;return this.http.put(url,data).then(data=>{this.dataBindModel.updateResultMsg="Employee updated";return data}).catch(err=>{this.dataBindModel.updateResultMsg="Employee NOT updated";return err})}setTest(){this.dataBindModel.test=this.urlParams().get("id");return Promise.resolve()}setReviews(){this.dataBindModel.reviews="<strong> testing reviews</strong>";return Promise.resolve()}updateReview(evt){this.dataBindModel={reviews3:this.dataBindModel.reviews,reviews5:5};return Promise.resolve()}formatHTML(elem){const data=this.dataBindModel[elem.dataset.bindModel];if(data&&data.length)elem.innerHTML=`<p data-bind-model="reviews3"></p> ${this.formatDate(data)}`;return Promise.resolve()}get condition(){return this.dataBindModel.terms}}class View{get home(){const html=`<h1>Home page</h1>\n                      <div data-bindtext="deleteResultMsg"></div>\n\n                      <table>\n                      <thead>\n                      <tr>\n                      <th>_id</th>\n                      <th>firstName</th>\n                      <th>lastName</th>\n                      <th>department</th>\n                      <th>jobTitle</th>\n                      <th>salary</th>\n                      <th>startDate</th>\n                      </tr>\n                      </thead>\n                      <tbody data-bind-model="employeeTable">\n                      </tbody>\n                      </table>\n                      \n                      \n                      `;return Promise.resolve(html)}get form(){return Promise.resolve(`\n       <h1>Rest API Demo</h1>\n       <h3 data-bind-model="saveResultMsg"></h3>\n            <form data-bind-*>\n           <br /> _id\n           <input type="text" name="_id" value="" /><br />\n           <br /> firstName\n           <input type="text" name="firstName" value="" /><br />\n           <br /> lastName\n           <input type="text" name="lastName" value="" /><br />\n           <br />\n       \n           department\n           <select name="department">\n               <option>IT Support</option>\n               <option>Finance</option>\n               <option>Quality Assurance</option>\n               <option>Quality Control</option>\n               <option>Facilities</option>\n           </select><br />\n       \n       \n           <br />startDate\n           <input type="date" name="startDate" value="" /><br />\n           <br /> jobTitle\n           <input type="text" name="jobTitle" value="" /><br />\n           <br /> salary\n           <input type="text" name="salary" value="" />\n           <br />\n       \n       \n           <br />\n           <br />\n           <input class="button is-primary" type="button" value="Save" data-bind-event="click:saveEmployee" />\n           </form>\n           \n\n       `)}get update(){return Promise.resolve(`\n\n        <h1>Rest API Demo</h1>\n        <h3 data-bind-model="updateResultMsg"></h3>\n            <form data-bind-*>\n           <br /> _id\n           <input type="text" name="_id" value="" /><br />\n           <br /> firstName\n           <input type="text" name="firstName" value="" /><br />\n           <br /> lastName\n           <input type="text" name="lastName" value="" /><br />\n           <br />\n       \n           department\n           <select name="department">\n               <option>IT Support</option>\n               <option>Finance</option>\n               <option>Quality Assurance</option>\n               <option>Quality Control</option>\n               <option>Facilities</option>\n           </select><br />\n       \n       \n           <br />startDate\n           <input type="date" name="startDate" value="" /><br />\n           <br /> jobTitle\n           <input type="text" name="jobTitle" value="" /><br />\n           <br /> salary\n           <input type="text" name="salary" value="" />\n           <br />\n       \n       \n           <br />\n           <br />\n           <input class="button is-primary" type="button" value="Save" data-bind-event="click:updateEmployee" />\n           </form>\n        \n        \n        \n        \n        `)}get todo(){return Promise.resolve(`<h1>Todo Fetch List</h1>\n                <div data-bind-model="todoList"></div>`)}get test(){return Promise.resolve(`test`)}get safe(){return Promise.resolve(`<h1>Safe HTML Test</h1>\n                <p>Most modern browsers have support to protect from xss attacks</p>\n                <p><a href="?id=<strong>Is safe HTML?</strong>#safe">Click to Reload with unsafe URL Params</a></p>\n                <p> Safe Text: <span data-bind-model="test" data-bind-safe></span></p>\n                <p> NOT Safe Text: <span data-bind-model="test"></span></p>\n                <p> Safe HTML Input: <br /> <textarea data-bind-model="test" data-bind-safe data-bind-input="false"></textarea></p>\n                <p> Not Safe HTML Input: <br /> <textarea data-bind-model="test" data-bind-input="false"></textarea></p>\n                `)}get form2(){return this.fetchHTML("public/templates/test2.html")}}Object.assign(View.prototype,{fetchHTML(file){return fetch(file).then(response=>{if(!response.ok)throw Error(response.statusText);return response.text()}).then(text=>{let doc=(new DOMParser).parseFromString(text,"text/html");return doc.body.innerHTML.toString()}).catch(err=>{console.error(err);return"<p>Could not fetch file: ${file}</p>"})}});NodeList.prototype.forEach=Array.prototype.forEach;Object.assign(BaseModel.prototype,{formatNumber(number){return(new Intl.NumberFormat).format(number)},formatDate(date){const options={weekday:"long",year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"numeric",second:"numeric"};return new Date(date).toLocaleDateString("en-US",options)}});window.addEventListener("spaRouteReady",()=>{[].slice.call(document.querySelectorAll("*[data-custom-no-submit]")).forEach(form=>{form.addEventListener("submit",event=>event.preventDefault())})});Object.assign(BaseModel.prototype,{redirect(route=window.location.hash.slice(1).split("?")[0],params={}){const query=this.generateUrlParams(params);window.location.assign(`${query}#${route}`)}});